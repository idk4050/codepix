apiVersion: v1
kind: Service
metadata:
  name: eventstore
  namespace: codepix-bank-api
spec:
  clusterIP: None
  ports:
    - port: 4002
  selector:
    name: eventstore
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: eventstore
  namespace: codepix-bank-api
spec:
  replicas: 3
  podManagementPolicy: Parallel
  serviceName: eventstore
  selector:
    matchLabels:
      name: eventstore
  volumeClaimTemplates:
    - metadata:
        name: eventstore-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  template:
    metadata:
      labels:
        name: eventstore
    spec:
      volumes:
        - name: eventstore-secrets
          secret:
            secretName: eventstore
            defaultMode: 0600
      containers:
        - name: eventstore
          image: docker.io/mongo:6.0.1
          ports:
            - containerPort: 4002
          resources: {}
          volumeMounts:
            - name: eventstore-data
              mountPath: /data/db
            - name: eventstore-secrets
              mountPath: /data/secrets
          command:
            - "/bin/sh"
            - "-c"
            - |
              logpath="/proc/1/fd/1"
              mongod --logpath "$logpath" --fork || exit 1

              for i in $(seq 30); do
                ok=`mongosh admin --quiet --eval "!!db.stats().ok"`
                [ "$ok" = "true" ] && break
                sleep 1
              done
              [ "$ok" != "true" ] && exit 1

              mongosh admin --quiet --eval "db.createUser({
                user: '$ES_ADMIN_USER',
                pwd: '$ES_ADMIN_PASSWORD',
                roles: [{ role: 'root', db: 'admin' }]
              })" > "$logpath"

              mongosh "$ES_NAME" --username "$ES_ADMIN_USER" --password "$ES_ADMIN_PASSWORD" \
                --authenticationDatabase admin --quiet --eval "db.createUser({
                user: '$ES_USER',
                pwd: '$ES_PASSWORD',
                roles: [{ role: 'readWrite', db: '$ES_NAME' }]
              })" > "$logpath"

              mongod --logpath "$logpath" --shutdown || exit 1
              mongod --logpath "$logpath" \
                --bind_ip_all \
                --port "$ES_PORT" \
                --auth \
                --replSet "$ES_REPLICA_SET_NAME" \
                --keyFile /data/secrets/ES_REPLICA_SET_KEY || exit 1
          lifecycle:
            postStart:
              exec:
                command:
                  - "/bin/sh"
                  - "-c"
                  - |
                    [ "$(hostname)" != eventstore-0 ] && exit 0

                    service="eventstore.codepix-bank-api.svc.cluster.local"
                    args="admin --port $ES_PORT --username $ES_ADMIN_USER --password $ES_ADMIN_PASSWORD"

                    for i in $(seq 6); do
                      ok=$(mongosh $args --quiet --eval "!!rs.status().ok")
                      [ "$ok" = "true" ] && break

                      sleep 5
                      mongosh $args --quiet --eval "rs.initiate({
                        _id: '$ES_REPLICA_SET_NAME', members: [
                        { _id: 0, host: 'eventstore-0.$service:$ES_PORT', priority: 1 },
                        { _id: 1, host: 'eventstore-1.$service:$ES_PORT', priority: 0.5 },
                        { _id: 2, host: 'eventstore-2.$service:$ES_PORT', priority: 0.5 }
                      ]})" > /proc/1/fd/1
                    done
                    [ "$ok" = "true" ] && exit 0 || exit 1
          envFrom:
            - configMapRef:
                name: eventstore
            - secretRef:
                name: eventstore
