// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/codepix/transaction/read/stream.proto

package read

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamClient interface {
	Started(ctx context.Context, opts ...grpc.CallOption) (Stream_StartedClient, error)
	Confirmed(ctx context.Context, opts ...grpc.CallOption) (Stream_ConfirmedClient, error)
	Completed(ctx context.Context, opts ...grpc.CallOption) (Stream_CompletedClient, error)
	Failed(ctx context.Context, opts ...grpc.CallOption) (Stream_FailedClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Started(ctx context.Context, opts ...grpc.CallOption) (Stream_StartedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[0], "/codepix.transaction.read.Stream/Started", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamStartedClient{stream}
	return x, nil
}

type Stream_StartedClient interface {
	Send(*Ack) error
	Recv() (*StartedTransactions, error)
	grpc.ClientStream
}

type streamStartedClient struct {
	grpc.ClientStream
}

func (x *streamStartedClient) Send(m *Ack) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamStartedClient) Recv() (*StartedTransactions, error) {
	m := new(StartedTransactions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Confirmed(ctx context.Context, opts ...grpc.CallOption) (Stream_ConfirmedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[1], "/codepix.transaction.read.Stream/Confirmed", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamConfirmedClient{stream}
	return x, nil
}

type Stream_ConfirmedClient interface {
	Send(*Ack) error
	Recv() (*ConfirmedTransactions, error)
	grpc.ClientStream
}

type streamConfirmedClient struct {
	grpc.ClientStream
}

func (x *streamConfirmedClient) Send(m *Ack) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamConfirmedClient) Recv() (*ConfirmedTransactions, error) {
	m := new(ConfirmedTransactions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Completed(ctx context.Context, opts ...grpc.CallOption) (Stream_CompletedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[2], "/codepix.transaction.read.Stream/Completed", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamCompletedClient{stream}
	return x, nil
}

type Stream_CompletedClient interface {
	Send(*Ack) error
	Recv() (*CompletedTransactions, error)
	grpc.ClientStream
}

type streamCompletedClient struct {
	grpc.ClientStream
}

func (x *streamCompletedClient) Send(m *Ack) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamCompletedClient) Recv() (*CompletedTransactions, error) {
	m := new(CompletedTransactions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Failed(ctx context.Context, opts ...grpc.CallOption) (Stream_FailedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[3], "/codepix.transaction.read.Stream/Failed", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamFailedClient{stream}
	return x, nil
}

type Stream_FailedClient interface {
	Send(*Ack) error
	Recv() (*FailedTransactions, error)
	grpc.ClientStream
}

type streamFailedClient struct {
	grpc.ClientStream
}

func (x *streamFailedClient) Send(m *Ack) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamFailedClient) Recv() (*FailedTransactions, error) {
	m := new(FailedTransactions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
// All implementations must embed UnimplementedStreamServer
// for forward compatibility
type StreamServer interface {
	Started(Stream_StartedServer) error
	Confirmed(Stream_ConfirmedServer) error
	Completed(Stream_CompletedServer) error
	Failed(Stream_FailedServer) error
	mustEmbedUnimplementedStreamServer()
}

// UnimplementedStreamServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (UnimplementedStreamServer) Started(Stream_StartedServer) error {
	return status.Errorf(codes.Unimplemented, "method Started not implemented")
}
func (UnimplementedStreamServer) Confirmed(Stream_ConfirmedServer) error {
	return status.Errorf(codes.Unimplemented, "method Confirmed not implemented")
}
func (UnimplementedStreamServer) Completed(Stream_CompletedServer) error {
	return status.Errorf(codes.Unimplemented, "method Completed not implemented")
}
func (UnimplementedStreamServer) Failed(Stream_FailedServer) error {
	return status.Errorf(codes.Unimplemented, "method Failed not implemented")
}
func (UnimplementedStreamServer) mustEmbedUnimplementedStreamServer() {}

// UnsafeStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServer will
// result in compilation errors.
type UnsafeStreamServer interface {
	mustEmbedUnimplementedStreamServer()
}

func RegisterStreamServer(s grpc.ServiceRegistrar, srv StreamServer) {
	s.RegisterService(&Stream_ServiceDesc, srv)
}

func _Stream_Started_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Started(&streamStartedServer{stream})
}

type Stream_StartedServer interface {
	Send(*StartedTransactions) error
	Recv() (*Ack, error)
	grpc.ServerStream
}

type streamStartedServer struct {
	grpc.ServerStream
}

func (x *streamStartedServer) Send(m *StartedTransactions) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamStartedServer) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_Confirmed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Confirmed(&streamConfirmedServer{stream})
}

type Stream_ConfirmedServer interface {
	Send(*ConfirmedTransactions) error
	Recv() (*Ack, error)
	grpc.ServerStream
}

type streamConfirmedServer struct {
	grpc.ServerStream
}

func (x *streamConfirmedServer) Send(m *ConfirmedTransactions) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamConfirmedServer) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_Completed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Completed(&streamCompletedServer{stream})
}

type Stream_CompletedServer interface {
	Send(*CompletedTransactions) error
	Recv() (*Ack, error)
	grpc.ServerStream
}

type streamCompletedServer struct {
	grpc.ServerStream
}

func (x *streamCompletedServer) Send(m *CompletedTransactions) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamCompletedServer) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_Failed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Failed(&streamFailedServer{stream})
}

type Stream_FailedServer interface {
	Send(*FailedTransactions) error
	Recv() (*Ack, error)
	grpc.ServerStream
}

type streamFailedServer struct {
	grpc.ServerStream
}

func (x *streamFailedServer) Send(m *FailedTransactions) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamFailedServer) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Stream_ServiceDesc is the grpc.ServiceDesc for Stream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codepix.transaction.read.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Started",
			Handler:       _Stream_Started_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Confirmed",
			Handler:       _Stream_Confirmed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Completed",
			Handler:       _Stream_Completed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Failed",
			Handler:       _Stream_Failed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/codepix/transaction/read/stream.proto",
}
